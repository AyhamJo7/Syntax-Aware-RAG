[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "syntax-aware-rag"
version = "0.1.0"
description = "Advanced RAG system with syntax-aware chunking and hierarchical retrieval"
authors = [
    {name = "Mhd Ayham Jourman", email = "ayham.jo7@github.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.11"
keywords = ["rag", "retrieval", "nlp", "chunking", "embeddings", "hierarchical-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "spacy>=3.7.0",
    "nltk>=3.8.0",
    "unstructured>=0.11.0",
    "sentence-transformers>=2.3.0",
    "faiss-cpu>=1.7.4",
    "rank-bm25>=0.2.2",
    "fastapi>=0.108.0",
    "uvicorn[standard]>=0.25.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pandas>=2.1.0",
    "numpy>=1.26.0",
    "scikit-learn>=1.4.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "tiktoken>=0.5.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "tqdm>=4.66.0",
    "httpx>=0.26.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.92.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "types-pyyaml",
    "types-tqdm",
    "black>=23.12.0",
]
gpu = [
    "faiss-gpu>=1.7.4",
]
elasticsearch = [
    "elasticsearch>=8.11.0",
]
qdrant = [
    "qdrant-client>=1.7.0",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipykernel>=6.28.0",
    "ipywidgets>=8.1.0",
]

[project.scripts]
synrag = "syntax_aware_rag.cli.main:cli"

[project.urls]
Homepage = "https://github.com/AyhamJo7/Syntax-Aware-RAG"
Documentation = "https://github.com/AyhamJo7/Syntax-Aware-RAG/blob/main/README.md"
Repository = "https://github.com/AyhamJo7/Syntax-Aware-RAG"
Issues = "https://github.com/AyhamJo7/Syntax-Aware-RAG/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["syntax_aware_rag*"]

[tool.setuptools.package-data]
syntax_aware_rag = ["py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=syntax_aware_rag",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = false
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
